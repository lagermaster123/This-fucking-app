import React, { useState, useRef, useEffect } from 'react'
import styled from 'styled-components'
import FormInput from './components/Forms/FormInput'
import { useSelector, useDispatch } from 'react-redux'
import { Link } from 'react-router-dom'
import Summary from './components/Summary'
import axios from 'axios'


const Checkout = () => {
    const user = useSelector(state => state.user.user)
    const cart = useSelector(state => state.cart)
    const { cartItems } = cart
    const [ values, setValues ] = useState({
        user: user,
        total: 0,
        shippingAddress: {
            firstName: '',
            lastName: '',
            addressLine1: '',
            addressLine2: '',
            city: '',
            state: ''
        },
        billingAddress: {
            firstName: '',
            lastName: '',
            addressLine1: '',
            addressLine2: '',
            city: '',
            state: ''
        },
    })
    const inputs = [
        {
            id: 1,
            label: 'First Name',
            name: 'firstName',
            pattern: '[A-Za-z ]{3,32}',
            errorMessage: 'Invalid First Name',
            required: true
        },
        {
            id: 2,
            label: 'Last Name',
            name: 'lastName',
            pattern: '[A-Za-z ]{3,32}',
            errorMessage: 'Invalid Last Name',
            required: true
        },
        {
            id: 3,
            label: 'Address Line 1',
            name: 'addressLine1',
            pattern: '[A-Za-z0-9 ]{3,32}',
            errorMessage: 'Invalid Address',
            required: true
        },
        {
            id: 4,
            label: 'Address Line 2',
            name: 'addressLine2',
            pattern: '[A-Za-z0-9 ]{3,32}',
            errorMessage: 'Invalid Address'
        },
        {
            id: 5,
            label: 'City',
            name: 'city',
            pattern: '[A-Za-z ]{3,32}',
            errorMessage: 'Invalid City',
            required: true
        },
        {
            id: 6,
            label: 'State',
            name: 'state',
            pattern: '[A-Za-z ]{3,32}',
            errorMessage: 'Invalid State',
            required: true
        },
        {
            id: 7,
            label: 'Zip',
            name: 'zip',
            pattern: '[A-Za-z ]{5}',
            errorMessage: 'Invalid Zip',
            required: true
        },
    ]
    const Square = window.Square
    const payments = Square.payments('sandbox-sq0idb-ihuefPlQcS2alQH1s3AmMQ', 'LX71JE03RASQC');
    let card = useRef()

    useEffect(() => {
        async function renderSquare() {
            console.log('hit')
            document.getElementById('card-container').innerHTML = "";
            card.current = await payments.card();
            await card.current.attach('#card-container');
        }
        renderSquare()
    },[card])
    const dispatch = useDispatch()
    const [checked, setChecked] = useState(false)
    const [displayField, setDisplayField] = useState(false)
    const getCartSubtotal = () => {
        return cartItems.reduce((price, item) => item.price * item.qty + price, 0)
    }
    const getDelivery = () => {
        return 0
    }
    const getTax = () => {
        return (getCartSubtotal()*.06)
    }
    const getTotal = () => {
        return (getCartSubtotal() + getDelivery() + getTax())
    }
    const handleChecked = (value) => {
        setChecked(value)
        setDisplayField(value)
    }
    async function placeOrder(event) {
        
        try {
          const result = await card.tokenize();
          if ( result.status === 'OK' && cartItems.length ) {
            axios({
                method: 'post',
                url: '/api/place-order',
                data: {
                    token: result.token,
                    total: parseInt(getTotal().toFixed(2)),
                    shippingAddress: {
                        ...values.shippingAddress
                    },
                    billingAddress: {
                        ...values.billingAddress
                    },
                    Products: cartItems
                }
            })
          }
        } catch (e) {
          console.error(e);
        }
      }

      const onChange = (e) => {
          setValues({...values, [e.target.variable]: {[e.target.name]: e.target.value}})
      }

    return (
        <CheckoutStyles>
            <div className="main">
                <div className="section">
                        {cartItems.filter(item => item.method === 'delivery').length > 0 
                            ? 
                                <div className="billing-info">
                                    <h1>Shipping</h1>
                                    <div className="d-flex">
                                        {/* <div className="left m-1">
                                            {inputs.map((input, i) => (
                                                i % 2 === 0
                                                ? <FormInput
                                                    key={i}
                                                    variable={'billingAddress'}
                                                    {...input}
                                                /> : null
                                            ))}
                                        </div>
                                        <div className="right m-1">
                                            {inputs.map((input, i) => (
                                                i % 2 !== 0
                                                ? <FormInput
                                                    key={i}
                                                    variable={'billingAddress'}
                                                    {...input}
                                                /> : null
                                            ))}
                                        </div> */}
                                    </div>
                                </div>
                            : null
                        }
                    <div className="billing-info">
                        <h1>Billing</h1>
                        <div className="d-flex">
                            {/* <div className="left m-1">
                                {inputs.map((input, i) => (
                                    i % 2 === 0
                                    ? <FormInput
                                        key={i}
                                        variable={'billingAddress'}
                                        {...input}
                                    /> : null
                                ))}
                            </div>
                            <div className="right m-1">
                                {inputs.map((input, i) => (
                                    i % 2 !== 0
                                    ? <FormInput
                                        key={i}
                                        variable={'billingAddress'}
                                        {...input}
                                    /> : null
                                ))}
                            </div> */}
                        </div>
                    </div>
                </div>
                <div className="section">
                    <Summary 
                        cartItems={cartItems} 
                        card={card}
                        getDelivery={getDelivery}
                        getCartSubtotal={getCartSubtotal}
                        getTax={getTax}
                        getTotal={getTotal}/>
                </div>
            </div>
        </CheckoutStyles>
    )
}

export default Checkout

const CheckoutStyles = styled.div`
    .main {
        display: flex;
        min-height: 100vh;
        background-color: #F3E6CC;
        padding: 3em;
        .section {
            padding: 5em;
            width: 50vw;
            display: flex;
            justify-content: center;
            align-items: center;
            .input {
                border: none;
                margin: .5em;
            }
            .billing-info {
                display: flex;
                flex-direction: column;
                align-items: center;
                text-align: center;
                margin: 2em;
            }
            .summary {
                display: flex;
                flex-direction: column;
                padding: 1em;
                background-color: white;
                height: 50vh;
                width: 33vw;
                .checkout {
                    margin-bottom: 2em;
                    a {
                        text-decoration: none;
                        transition: .5s;
                        color: black;
                        &:hover {
                            text-decoration: underline;
                        }
                    }
                    .checkout-item {
                        display: flex;
                        justify-content: space-between;
                        padding: .5em;
                        border-bottom: 1px solid rgba(0,0,0,.25);
                    }
                }
                .cost {
                    margin-top: auto;
                    .cost-item {
                        padding: 0 1em;
                        width: 30vw;
                        display: flex;
                        justify-content: space-between;
                    }
                }
                .total {
                    border-top: 1px solid rgba(0,0,0,.25);
                    font-weight: bold;
                    
                }
            }
        }
    }
`